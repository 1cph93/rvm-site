.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/rvm/" }
    RVM
  &nbsp;>&nbsp;
  %a{ :href => "/rvm/basics/" }
    Basics
  %hr

%h1 The Basics of RVM

%p
  Wondering why you should
  %a{:href => "/rvm/"} use RVM?
  For a start, not only does RVM make installing multiple ruby interpreters / runtimes easy and consistent, it provides features
  such as gemsets that aren't typically supported out of the box on most ruby installs.
%p
  RVM also lets you use different rubies in a manner that wont mess with your existing ruby install (unless you tell it to) as well
  as letting you run multiple different rubies in seperate terminals concurrently!

%h3 Getting started

%p
  First, you must ensure that you
  %a{:href => "/rvm/install/"} install RVM
  \.

%h3
  Post Install Configuration

%p
  The rvm installation documentation instructs you to put the following line at the very end of your 
  bash profile:
  %pre.code
    :preserve
      [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session.

%p
  NOTE: This is for a <b>user</b> install. If you installed with sudo then you substitute '$HOME/.rvm' 
  with '/usr/local/rvm'.
%p
  For those who are not very familiar with bash scripting, I will explain in the next few paragraphs what the line above does.
%p
  Here we see that [[ condition ]] evaluates the condition inside the double brackets, and returns true or false. The option -s tells bash to look for the named file, and decide whether it exists and is nonempty. So the line:
  %pre.code
    :preserve
      [[ -s "$HOME/.rvm/scripts/rvm" ]]

  looks inside the default rvm scripts folder <i>'~/.rvm/scripts/'</i> for rvm, and returns true or 
  false based on that criteria.

%p
  Next, the &amp;&amp; operator (a logical AND with short-circuit) executes the rest of the line if,
  and only if, the previous test returns true. This means that, in our rvm example, if the file '~/.
  rvm/scripts/rvm' is not found (or is empty) then bash ignores the rest of the line.

  NOTE: I've seen the &amp;&amp; used a lot when installing software from source in linux for make
  &amp;&amp; sudo make install -- if make fails, then it doesn't try to install it to your system.
  This is the joy of command chaining at its finest.

%p
  Finally, the shell command '.' file is identical to the bash/zsh 'source' command.
  This command reads the file listed after it and executes each command listed in the currently
  running shell. This means that:
  %pre.code
    :preserve
      . "$HOME/.rvm/scripts/rvm"

  executes the rvm shell script, which contains the master 'rvm()'
  function that you will be using to issue RVM commands in your shell.
  NOTE: Sometimes on OS X, '.' fails to source correctly. If that happens, simply change '.' for
  'source'.
%p
  Note that the '#' is the shell comment character so everything after it is
  a comment and ignored by the shell when the line is executed.
%p
  When you log in either via ssh or the local shell account RVM will be loaded as a function.
%p
  For non-interactive shells RVM will be added to PATH only, not loaded.
  This means using rubies is not possible in this mode, but there are simple methods to load ruby:
  %pre.code
    :preserve
      source $(rvm 1.9.3 do rvm env --path)

  Then, when you login or spawn a shell this will automatically load RVM regardless of the shell type.
  Pretty handy, huh? Also, make sure the RVM sourcing line is the <i>last</i> line in your 
  '$HOME/.bash_profile'. This stops anything else from being able to override it since it will be 
  the last thing executed from the .bash_profile.

  If you are using the ZSH shell then you can place the sourcing line in your  in ~/.zshrc.
%p
  You should now open a new shell and start playing with rvm.

%p
  A note about the .bash_profile warning.
  The
  %a{:href => "/rvm/install"}
    rvm install troubleshooting notes
  explain how to change your bash profile to work with rvm.
  In a few linux distributions, the default .bash_profile (occasionally, the .bashrc) contains the
  following line:
  %pre.code
    :preserve
      [ -z "$PS1" ] && return

  The condition 
  %pre.code
    :preserve
      [ -z "$PS1" ]
  is true if the string "$PS1" has zero length (a non-interactive shell).
  rvm needs to load for both interactive and non-interactive shells which is why it strongly is
  recommended to alter this file.
%p
  First ensure that the previous step was successful and that rvm is loaded correctly.
  To do this, and verify that RVM is loaded *as a shell function*, run:

= sh_cmd "type rvm | head -1"

%p
  Assuming this shows "rvm is a function", you're good to go.
  As an example, to install and use Ruby 1.9.2 you may do:
%pre.code
  :preserve
    $ rvm install 1.9.2

%p
  Once you have installed a Ruby interpreter with RVM successfully you may then
  use it by executing the following command:
  %pre.code
    :preserve
      $ rvm use 1.9.2

      $ ruby -v

      ruby 1.9.2p0 (2010-08-18 revision 29036) [x86_64-darwin10.4.0]

      $ which ruby

      /Users/wayne/.rvm/rubies/ruby-1.9.2-p0/bin/ruby

%p
  NOTE: There has been some confusion amongst new users as to the proper way to switch between Ruby 
  versions.  Do not include the 'ruby-' portion of whatever is listed in the output of 
  %pre.code
    :preserve
      rvm list
  for installed rubies. This is just used to indicate the differences between, say, REE rubies, and
  MRI rubies, etc. However, do note that when you are switching between an MRI or Rubinus, or REE, 
  as an example, <i>then</i> you use the ree|ruby|rbx part. When you want to switch, just use the
  version number and any patch level. If its a -head version use the full string as it will not
  contain numbers. This also applies when setting a default Ruby. Below is an example of what I mean:

  %pre.code
    :preserve
      # This changes to MRI Ruby 1.9.2-p180 and sets it as your default.
      $ rvm use 1.9.2-p180 --default

      # The following changes to ruby-head (MRI Ruby) buts does <i>not</i>
      # set it as your default Ruby.
      $ rvm use ruby-head

      # This changes to ree-head and <i>does</i> set it as
      # your default ruby
      $ rvm use ree-head --default

      # You use the following full form if, for example,
      # you previously had an MRI or Rubinus ruby selected.
      $ rvm use ree-1.8.7-2011.03

      # This changes to whatever RVM recognizes as the most current
      # MRI Ruby 1.9.2, and sets it as default.
      $ rvm use 1.9.2 --default

%p
  <strong>NOTE:</strong> If you use <i>just</i> the Major.Minor version numbers,
  RVM checks for, and uses, what is the most current patchlevel in its $rvm_path/config/db for that
  Major.Minor version. For example, if you only have 1.9.2-p125 installed, and 1.9.2-p320 is the
  lastest, RVM will attempt to download, install, and set 1.9.2-p320 as your default 1.9.2 for you.
  This behaviour may, or may not, be what you want. If its not, then be sure to include the patch
  level when you specify which Ruby RVM should use when setting a default. RVM updates the known
  list ($rvm_path/config/db and $rvm_path/config/known) everytime you update RVM, so the 'current'
  version of a Major.Minor (eg. 1.9.2) can change on you. RVM does not go by what you have installed
  for this reason. It goes by what is maintained in those two files.

%p
  The last example above does not use a patch level because you are basically saying use the most
  currently released stable version of 1.9.2 which, as of the time of this writing, is 1.9.2-p290.
  Also, please take note that the keyword <i>use</i> above causes RVM to output the version it is
  switching to. Basically, it makes the change operation verbose. Note that it is <i>not</i> 
  required in most operations, and is meant solely for console users to be given a visual prompt
  that RVM has, in fact, changed Rubies and to which one.

%p
  <strong>PLEASE NOTE:</strong> RVM is 'hands off' any system ruby that you have installed.
  To be able to "use" your system ruby you can tell RVM to undo the environment changes that it 
  has applied, as follows.

%pre.code
  :preserve
    $ rvm use system

    $ ruby -v

    ruby 1.8.7 (2009-06-12 patchlevel 174) [universal-darwin10.0]

    $ which ruby

    /usr/bin/ruby

%p
  'which' tells the current shell to return the location of Ruby. In this case, you can see that RVM
  has, in fact, 'hidden' itself from the system, and given you access back to the system installed
  Ruby. Hidden does not mean RVM is gone, instead, what is done is the system environment and related
  variables are set back to what the system Ruby would expect them to be as if RVM were not
  installed at all. Executing another
  %pre.code
    :preserve
      $ rvm use default
  will return RVM to service, and load whatever Ruby you have set as your default Ruby. You can see
  what that is at any time by executing:
  %pre.code
    :preserve
      $ rvm alias show default
%p
  <strong>We can not stress this enough! RVM does not control the system Ruby or its gems.
  Only Rubies and gems installed by RVM are under it's control!</strong>

%h3
  Where To Now?

%p
  For further explanation, look around the rest of the site. In particular, make sure you check out
  the workflow
  %a{ :href => "/workflow/examples/" } examples.

%p
  Remember that switching rubies is on a per-shell basis. If you want even more information on how
  to set which ruby is available when you open a new shell, you'll need to read our page on how to
  %a{:href => "/rubies/default/"} set a default ruby interpreter.

%p
  After you get the hang of dealing with Ruby Interpreters, next up is starting to learn about RVM
  %a{:href => "/gemsets/basics/"} gemsets.

%p
  If you would like to know which Ruby RVM has selected and made active at any time, if any, you can
  add this information to your
  %a{:href => "/workflow/prompt/"} shell prompt.
%p
  If you use tab completion in your shell also see the documentation on using
  %a{:href => "/workflow/completion/"} shell completion.


%h1
  Community Resources
%ul
  %li
    Check here for an
    %a{:href => "http://rubylearning.com/blog/2010/12/20/how-do-i-keep-multiple-ruby-projects-separate/", :target => "_blank"} excellent post
    introducting the why of RVM, written by Steve Klabnik.
