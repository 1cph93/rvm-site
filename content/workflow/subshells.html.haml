.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/workflow/" }
    Workflow
  &nbsp;>&nbsp;
  %a{ :href => "/workflow/subshells/" }
    Subshells
  %hr
%h1
  Subshells
%p
  Using rvm it is very easily 'switch' to your default ruby or any other ruby while still maintaining all of the current shell's settings.
%p
  Let's explore a brief illustration of this:
%pre.code
  :preserve
    ∴ rvm 1.8.6 # We are now using 1.8.6 for the current shell
    ∴ ruby -v

    ruby 1.8.6 (2009-08-04 patchlevel 383) [i686-darwin10.0.0]
%p
  We can spawn a subshell running a different ruby by prepending an rvm selector:
%pre.code
  :preserve
    ∴ echo `rvm 1.9.1 ; ruby -v`

    ruby 1.9.1p243 (2009-07-16 revision 24175) [i386-darwin10.0.0]
%p
  What is the ruby of our original shell after running the above sub shell command?
%pre.code
  :preserve
    ∴ ruby -v

    ruby 1.8.6 (2009-08-04 patchlevel 383) [i686-darwin10.0.0]
%p
  Not changed at all! And we haven't had to mess with GEM_HOME, yay!
%p
  So we have 1.8.6p383 selected, what if we want to run something against the system's default ruby? Prepend another selector in a subshell!
%pre.code
  :preserve
    ∴ echo `rvm system ; ruby -v`

    ruby 1.8.7 (2008-08-11 patchlevel 72) [universal-darwin10.0]
%p
  What is the ruby of our original shell after running the above sub shell?
%pre.code
  :preserve
    ∴ ruby -v
    ruby 1.8.6 (2009-08-04 patchlevel 383) [i686-darwin10.0.0]
%p
  Still the 1.8.6p383 we had selected to use.

%h1
  Community Resources
%ul
  %li

