---
title: Phusion Passenger - Come on, ride the train, hey, ride it, woo woo...
---

= breadcrumbs "Integration", "Phusion Passenger"

%a{ :name => "passenger" }
%h1
  Using RVM rubies with Phusion Passenger
%p
  %a{:href => "https://www.phusionpassenger.com/"}
  Phusion Passenger
  is an application server for Ruby and Python that can integrate into Apache and Nginx, or run standalone. It's currently one of the most popular application servers for Ruby. RVM will allow you to use any of it's MRI/YARV Rubies with Phusion assenger very easily.

%h1
  Phusion Passenger 4
%p
  RVM requires at least Phusion Passenger version 4.0.0. Phusion Passenger 4 has full integration support for RVM and should work out of the box with no configuration. The only thing you need to tell Phusion Passenger is which Ruby you want to use for which app.

%h2
  Using RVM with Phusion Passenger for Apache/Nginx
%p
  First of all you need to run
  %code= passenger-install-apache2-module
  and
  %code= passenger-install-nginx-module
  as documented in the Phusion Passenger manuals.
  At the end of the installation it outputs a
  %code= PassengerDefaultRuby
  (Apache) or
  %code= passenger_ruby
  (Nginx) configuration snippet for the web server. Its value is set to the RVM Ruby wrapper script that corresponds with the RVM Ruby and RVM gemset that was used to run the installer. This should be all you need for configuration of Phusion Passenger!

%p
  If you want to run any apps under a different RVM Ruby or RVM gemset, then you need to set a
  %code= PassengerRuby
  (Apache) or
  %code= passenger_ruby
  (Nginx) configuration option in that app's virtual host. The value must correspond to the desired RVM Ruby or RVM gemset. This is explained in detail in the Phusion Passenger document:
  %a{:href => "http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerRuby"} Apache manual,
  %a{:href => "http://www.modrails.com/documentation/Users%20guide%20Nginx.html#PassengerRuby"} Nginx manual. There's a section in that manual that covers RVM, and there's even a tool to aid RVM users.

%h2
  Using RVM with Phusion Passenger Standalone
%p
  Phusion Passenger Standalone runs standalone, without needing you to install an external web server like Apache or Nginx, although it uses an Nginx core internally. Phusion Passenger Standalone can be invoked with 'passenger start'. It runs the app with the RVM Ruby and RVM gemset that was used to run the 'passenger start' command.

%p
  If you want to use 'passenger start' with a different RVM Ruby or RVM Gemset then you need to 'gem install passenger' in that Ruby/Gemset first, after which you can invoke 'passenger start'.

%h2
  Outdated information
%p
  Previous versions of this web page stated that you need to create a .rvmrc file for Phusion Passenger. This is no longer necessary. Other than the aforementioned instructions, there's really nothing else you need to follow.

%h2
  Phusion Passenger Standalone
%p
  Then there's Passenger Standalone, i.e. 'passenger start'. Passenger Standalone uses Nginx internally, and it writes a passenger_ruby directive to the Nginx configuration file. This directive points to the RVM Ruby wrapper script that corresponds with the RVM Ruby and RVM gemset that was used to run the 'passenger start' command.

%h2
  Bundler Gotcha
%p
  When using Bundler in your project, Passenger will try to be smart and only add to your $LOAD_PATH the gems listed in your Gemfile. This can lead to "unable to load" errors for your unlisted gems (this should only happen during development). You can check your run-time load path by looking in the purple Phusion Passenger error page that it shows. You won't be able to load any gems that are not in that load path.

%h2
  Troubleshooting
%ul
  %li
    The most common issue is forgetting the /bin/ part of the path to get the proper wrapper script:
  %li
    The next most common issue is listening to the output of the passenger installation script with
    respect to where the passenger_ruby/PassengerRuby is located. Be sure to use the wrapper script location
    as specified above. To be more clear, see the nginx example below:
    %pre.code
      :preserve
        passenger_ruby /home/wayne/.rvm/bin/passenger_ruby;
        * NOTICE THE '.rvm/bin' DIR  ^ ^ ^
        * do NOT use the actual ruby binary in .rvm/rubies/{passenger_ruby}/bin/ruby
        * do not listen to passenger's output for passenger_ruby as passenger is not aware of rvm.

    For system wide (root) installs the bin directory is /usr/local/rvm/bin instead:
    %pre.code
      :preserve
        passenger_ruby /usr/local/rvm/bin/passenger_ruby;

%h2
  FAQ
%ul
  %li
    %p
      %strong Q: Can I run multiple projects under passenger with each project on a different ruby version?
    %p
      A: Yes, since Phusion Passenger 4.
  %li
    %p
      %strong Q: How do I use custom gemsets under passenger?
    %p
      A: Switch to that gemset first, then run 'passenger-config --ruby-command' as documented in the Phusion Passenger manual. It'll tell you what 'PasengerRuby'/'passenger_ruby' config option you should put in your virtual host. Edit your virtual host accordingly and restart the web server.
  %li
    %p
      %strong Q: How can I use commands like passenger-status in conjunction with a user install but run them as root?
    %p
      A: Mainly the key to this is to use wildcards in the sudoers file as the following examples show.
      %pre.code
        :preserve
          /usr/bin/env GEM_PATH=* GEM_HOME=* PATH=* passenger-status

%h2
  Community Resources
%ul
  %li
    %a{:href => "https://www.phusionpassenger.com/support"}
      Phusion Passenger support and documentation resources
