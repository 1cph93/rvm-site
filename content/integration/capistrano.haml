= breadcrumbs "Integration", "Capistrano"

%h1#capistrano
  Using RVM rubies with Capistrano
%p
  You currently have three options:
%ol
  %li
    If your rvm version on the server and locally are recent enough, use the rvm-capistrano gem.
  %li
    Use the capistrano :default_environment setting
  %li
    Enable .ssh environment variables using the PermitUserEnvironment option in your ssh configuration file

%p
  Gem option is preferred as it reduces configuration and does not contain
  hardcoded paths. Please note that RVM
  %strong will not
  be automatically loaded as a shell function but it will be available as a
  binary in PATH (for differences between the two versions, please see
  %a{:href => "/workflow/scripting/"} our scripting page
  for further clarification).

%h2#gem Integration via the rvm-capistrano gem

%p#plugin
  Starting with RVM 1.11.3 Capistrano integration was extracted to a separate gem.
  %a{ :href => "#old-plugin" } The old plugin integration.

%p
  Installation:

  %pre.code
    :preserve
      gem install rvm-capistrano

  Or add to Gemfile:

  %pre.code
    :preserve
      gem 'rvm-capistrano'

  Example Capfile / deploy.rb:

  %pre.code
    :preserve
      set :rvm_ruby_string, 'ree@rails3'                     # Or:
      #set :rvm_ruby_string, ENV['GEM_HOME'].gsub(/.*\//,"") # Read from local system
      
      require "rvm-capistrano"                               # Load RVM's capistrano plugin.

%p
  Please note that this defaults to using a user installation of rvm,
  if you wish to instead set it to use an system wide / root install
  add the following to your Capfile / deploy.rb:

  %pre.code
    :preserve
      set :rvm_type, :system  # Copy the exact line. I really mean :system here

%h3#automatic_installation Automatic installing RVM / Ruby (starting with rvm 1.11.0)

%h4#install_rvm
  RVM can be automatically installed on server, add the following to your Capfile / deploy.rb:

%p
  %pre.code
    :preserve
      before 'deploy:setup', 'rvm:install_rvm'

  and additionally if you prefer to update rvm on every installation:

  %pre.code
    :preserve
      before 'deploy', 'rvm:install_rvm'

  You can control if development / stable(default) version of RVM is installed with:

  %pre.code
    :preserve
      set :rvm_install_type, :head # or:
      #set :rvm_install_type, :stable

%h4#install_ruby
  RVM can automatically install Ruby on server, add the following to your Capfile / deploy.rb:

%p
  %pre.code
    :preserve
      before 'deploy:setup', 'rvm:install_ruby'

  or if you prefer to try to install on every deployment:

  %pre.code
    :preserve
      before 'deploy', 'rvm:install_ruby'

  You can control if ruby is only installed if needed(default) or always reinstalled with:

  %pre.code
    :preserve
      set :rvm_install_ruby, :install # or:
      #set :rvm_install_ruby, :reinstall

  By default ruby will be installed using all CPU cores, you can control this with:

  %pre.code
    :preserve
      set :rvm_install_ruby_threads, 4

  You can control shell selected for installing RVM / Ruby, by default it is Bash:

  %pre.code
    :preserve
      set :rvm_install_shell, :zsh

%h3#resources Important resources

%ul.square
  %li
    %a{:href => "https://github.com/mpapis/ad"} Example application
    we tested deployment on it.
  %li
    %a{:href => "/workflow/projects/#ruby-versions"} New project files
    not requiring trusting.

%h2#old-plugin Integration via the rvm capistrano plugin (old way)

%p
  If your rvm installs on both sides are recent enough (&gt;= 1.0.1),
  rvm has a new plugin available that takes advantage of a different approach.
  In the new option, you can do the following (adjust to your personal setup):

  %pre.code
    :preserve
      set :rvm_ruby_string, 'ree@rails3'                     # Or:
      #set :rvm_ruby_string, ENV['GEM_HOME'].gsub(/.*\//,"") # Read from local system
      
      $:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
      require "rvm/capistrano"                               # Load RVM's capistrano plugin.

  Rest of the integration is the same as for
  %a{ :href => "#gem" } gem.

%h2#hardcore Integration via :default_environment (hardcore)

%p
  For the second option add the following line in your deploy.rb file, adjusting to your particular rvm ruby of course,
%pre.code
  :preserve
    set :default_environment, {
      'PATH' => "/path/to/.rvm/gems/ree/1.8.7/bin:/path/to/.rvm/bin:/path/to/.rvm/ree-1.8.7-2009.10/bin:$PATH",
      'RUBY_VERSION' => 'ruby 1.8.7',
      'GEM_HOME'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'GEM_PATH'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'BUNDLE_PATH'  => '/path/to/.rvm/gems/ree-1.8.7-2010.01'  # If you are using bundler.
    }
%p
  To get the accurate locations have a look at cat ~/.rvm/config/default
%p
  Also, in order to have capistrano automatically trust project rvmrc files on deployments, you can do the following.
  In your 'config/deploy.rb' you can add:
  %pre.code
    :preserve
      namespace :rvm do
        task :trust_rvmrc do
          run \"rvm rvmrc trust \#\{release_path\}\"
        end
      end
%p
  And then use capistrano's hooks capabilities, by adding an 'after' hook like the following:
  %pre.code
    :preserve
      after "deploy", "rvm:trust_rvmrc"
%p
  to launch it.
