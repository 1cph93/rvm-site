= breadcrumbs "Integration", "Capistrano"

%h1#capistrano
  Using RVM with Capistrano

%h2 Benefits of integration

Why integrate RVM with Capistrano?  Well, if you like the
normal benefits of RVM, you won't want to lose them when
operating with the context of Capistrano deployment tasks.
So integration can achieve the following:

%ul(style="list-style: lower-latin")
  %li
    Ensure that all Capistrano tasks use the right
    Ruby / gems (and gemset, if you are using gemsets).
  %li
    %a(href="#install_rvm")
      Automatically install RVM via Capistrano
    , and/or
    %a(href="#install_ruby")
      a Ruby version via RVM via Capistrano
    (only available when using the
    %code.code rvm-capistrano
    gem - see
    %a(href="#gem") integration option 1
    below).
  %li
    %a(href="#gemset_management")
      Manage gemsets via Capistrano
    , allowing you to install or update project gems as part of your deployment.

%h2 Integration options

%p
  You currently have four options (from newest to oldest):
%ul(style="list-style: decimal")
  %li
    %a(href="https://github.com/wayneeseguin/rvm-capistrano#readme") gem:
    If your rvm version on the server is recent enough
    (>= 1.11.3), you should use the
    %code.code rvm-capistrano
    gem.
  %li
    %a(href="#old-plugin") plugin:
    If your rvm version is slightly older but still >= 1.0.1,
    you can use a capistrano plugin (N.B.
    %em not
    gem)
    which ships inside rvm itself.
  %li
    %a(href="#environment") environment:
    Use the capistrano
    %code.code :default_environment
    setting.
  %li
    Enable
    %code.code .ssh
    environment variables using the
    %code.code PermitUserEnvironment
    option in your ssh configuration file.
    Unfortunately this is not yet documented.

%p
  The first (gem) option is preferred as it reduces configuration and
  does not contain hardcoded paths. Please note that RVM
  %strong will not
  be automatically loaded as a shell function but it will be available as a
  binary in
  %code.code PATH
  (for differences between the two versions, please see
  %a(href="/workflow/scripting/") our scripting page
  for further clarification).


%h2#old-plugin Integration via the rvm capistrano plugin (old way)

%p
  Starting with 1.0.1, RVM includes a built-in plugin (N.B.
  %em not
  a gem) for capistrano support.  This is used in a near-identical way to
  %a(href="#gem") the gem approach above, except that an extra line
  is required to add RVM's lib directory to the load path so that
  the plugin can be found:

%pre.code
  :preserve
    set :rvm_ruby_string, 'ree@rails3'                     # Or:
    #set :rvm_ruby_string, ENV['GEM_HOME'].gsub(/.*\//,"") # Read from local system

    $:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
    require "rvm/capistrano"                               # Load RVM's capistrano plugin.

%p
  Please note that this plugin defaults to using a
  %em system
  installation of rvm, which is the exact opposite to the gem's
  default installation mode.
  If you wish to instead set it to use a per-user (non-root) install,
  add the following to your
  %code.code Capfile
  /
  %code.code deploy.rb
  \:

%pre.code
  :preserve
    set :rvm_type, :user  # Copy the exact line. I really mean :user here

%h2#environment Integration via :default_environment (hardcore)

%p
  For this option, add the following line in your
  %code.code deploy.rb
  file, adjusting to your particular rvm ruby of course:
%pre.code
  :preserve
    set :default_environment, {
      'PATH' => "/path/to/.rvm/gems/ree/1.8.7/bin:/path/to/.rvm/bin:/path/to/.rvm/ree-1.8.7-2009.10/bin:$PATH",
      'RUBY_VERSION' => 'ruby 1.8.7',
      'GEM_HOME'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'GEM_PATH'     => '/path/to/.rvm/gems/ree-1.8.7-2010.01',
      'BUNDLE_PATH'  => '/path/to/.rvm/gems/ree-1.8.7-2010.01'  # If you are using bundler.
    }
%p
  To get the accurate locations have a look inside
  %code.code ~/.rvm/config/default
%p
  Also, in order to have capistrano automatically trust project
  %code.code rvmrc
  files on deployments, you can do the following.
  In your
  %code.code config/deploy.rb
  you can add:
  %pre.code
    :preserve
      namespace :rvm do
        task :trust_rvmrc do
          run "rvm rvmrc trust \#{release_path}"
        end
      end
%p
  And then use capistrano's hooks capabilities, by adding an
  %code.code after
  hook like the following:
  %pre.code
    :preserve
      after "deploy", "rvm:trust_rvmrc"
%p
  to launch it.
