.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/gemsets/" }
    Gemsets
  &nbsp;>&nbsp;
  %a{ :href => "/gemsets/basics/" }
    Basics
  %hr

%h1
  Named Gem Sets
%p
  RVM gives you compartmentalized independent ruby setups.
  This means that ruby, gems and irb are all separate and self-contained from system and from each other.
%p
  You may even have separate named gem sets.
%p
  Let's say, for example, that you are testing two versions of a gem with ruby 1.9.1.
  You can install one to the default 1.9.1 and create a named gem set for the other version and switch between them easily.
%h3
  Example: testing gems
%pre.code
  :preserve
    ∴ rvm 1.9.1%testing
%p
  will use a '1.9.1%testing' GEM_HOME (be sure to create it first), whereas:
%pre.code
  :preserve
    ∴ rvm 1.9.1
%p
  will use the default 1.9.1 GEM_HOME :)
%h3
  Example: Rails versions & upgrading apps
%p
  To illustrate the point, let's talk about a common use case. Let us assume that we are testing out a rails application in order to upgrade it to the latest Rails from a previous version. RVM makes such testing very easy as it lets you quickly switch between multiple Rails versions. First let's set up the environments:
%pre.code
  :preserve

    ∴ rvm 1.9.1
    ∴ gem install rails -v 2.3.3

    ∴ rvm gemset create rails222 rails126
    Gemset 'rails222' created.
    Gemset 'rails126' created.

    ∴ rvm 1.9.1%rails222
    ∴ gem install rails -v 2.2.2

    ∴ rvm 1.9.1%rails126
    ∴ gem install rails -v 1.2.6

    ∴ rvm 1.8.7
    ∴ gem install rails -v 1.2.3
%p
  Note that, on each of the ruby installs above, you can have completely separate versions!
  Now that our environments are set up, switching between Rails versions and Ruby versions is quite simple:
%pre.code
  :preserve
    ∴ rvm 1.9.1%rails126 ; rails --version

    Rails 1.2.6

    ∴ rvm 1.8.7 ; rails --version

    Rails 1.2.3

    ∴ rvm 1.9.1%rails220 ; rails --version

    Rails 2.2.0

    ∴ rvm 1.9.1 ; rails --version

    Rails 2.3.3
%h2
  Warning!!!
%p
  * RVM gives you a separate gem directory for each and every Ruby version and gem set. *
  What this means is that gems will have to be explicitly installed for each revision and gem set.
  RVM provides you with a simple way to manage this process; see the
  '
  %a{:href => "/set/gem/"} RVM gem
  '
  page.
%p
  Although I recommend against it, if you are sure you can, use 'rvm gemdup default' and 'rvm gemdup system' to clone user default gems and system gems respectively.
  Unless of course I decide to remove this feature as I am not convinced it is worthwile :)


